

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  userid      String  @unique
  name        String?
  username    String? @unique
  imageUrl    String?
  email       String?
  bio         String?
  posts         Post[]
  saved         SavedPost[]
  likes         Like[]
  comments      Comment[]
  followedBy    Follows[]   @relation("following")
  following     Follows[]   @relation("follower")
  stories       Story[]

    @@map(name: "users")
}

model Follows {
    follower    User   @relation("follower", fields: [followerId], references: [userid])
    followerId  String
    following   User   @relation("following", fields: [followingId], references: [id])
    followingId String
    role        Role
    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

enum Role {
  FRIEND
  CLOSE_FRIEND
}


model Post {
  id            String    @id @default(uuid())
  content       String?
  imageurl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt 
  user         User        @relation(fields: [userId], references: [userid], onDelete: Cascade)
  userId       String      @map("user_id")
  likes        Like[]
  savedBy     SavedPost[]
  comments    Comment[]
  @@index([userId])
 
}

model Like {
  id        String   @id @default(cuid())
  postId    String?
  userId    String
  commentId String?
  User      User     @relation(fields: [userId], references: [userid], onDelete:Cascade)
  Post      Post?    @relation(fields: [postId], references: [id], onDelete:Cascade)
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete:Cascade)

  @@unique([postId, userId])
  @@unique([commentId, userId])
}


model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    body      String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user User @relation(fields: [userId], references: [userid], onDelete: Cascade)
    parentId  String?  @map("parent_id")
    parent    Comment? @relation("Replies", fields: [parentId], references: [id])
    replies   Comment[] @relation("Replies")
    likes     Like[]

    @@index([postId])
    @@index([userId])
}
model SavedPost {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    userId    String   @map("user_id")

    user User @relation(fields: [userId], references: [userid], onDelete: Cascade)

    @@unique([postId, userId])
    @@index([userId])
}
model Story {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  expiresAt   DateTime  
  imageUrl    String?  
  videoUrl    String?  
  user        User     @relation(fields: [userId], references: [userid])
  userId      String   @map("user_id")

  @@index([userId])
}